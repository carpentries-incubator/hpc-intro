To demonstrate, let's load the `abinit` module and then use the `module list`
command to show which modules we currently have loaded in our environment.
([Abinit](https://www.abinit.org/) is an open source materials science
modelling software package.)

```
{{ site.remote.prompt }} module load abinit
{{ site.remote.prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modulefiles:
  1) anaconda/python3                  6) intel-cmkl-17/17.0.2.174
  2) mpt/2.16                          7) gcc/6.2.0
  3) intel-cc-17/17.0.2.174            8) fftw-3.3.5-intel-17.0.2-dxt2dzn
  4) intel-fc-17/17.0.2.174            9) netcdf/4.4.1
  5) intel-compilers-17/17.0.2.174    10) abinit/8.2.3-intel17-mpt214
```
{: .output}

So in this case, loading the `abinit` module also loaded a variety of other
modules. Let's try unloading the `abinit` package.

```
{{ site.remote.prompt }} module unload abinit
{{ site.remote.prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modulefiles:
  1) anaconda/python3
```
{: .output}

So using `module unload` "un-loads" a module along with its dependencies. If we
wanted to unload everything at once, we could run `module purge` (unloads
everything).

```
{{ site.remote.prompt }} module load abinit
{{ site.remote.prompt }} module purge
```
{: .language-bash}

```
No Modulefiles Currently Loaded.
```
{: .output}

Note that `module purge` has removed the `anaconda/python3` module as well as
`abinit` and its dependencies.
