To demonstrate, let's use `module list`. `module list` shows all loaded
software modules.

```
{{ site.host_prompt }} module list
```
{: .language-bash}
```

Currently Loaded Modules:
  1) StdEnv                     (S)      6) libreadline/8.0-GCCcore-8.2.0 (H)
  2) GCCcore/8.2.0                       7) XZ/5.2.4-GCCcore-8.2.0        (H)
  3) bzip2/1.0.6-GCCcore-8.2.0  (H)      8) GMP/6.1.2-GCCcore-8.2.0       (H)
  4) zlib/1.2.11-GCCcore-8.2.0  (H)      9) libffi/3.2.1-GCCcore-8.2.0    (H)
  5) ncurses/6.1-GCCcore-8.2.0  (H)     10) Python/3.7.2-GCCcore-8.2.0

  Where:
   S:  Module is Sticky, requires --force to unload or purge
   H:             Hidden Module

```
{: .output}

```
{{ site.host_prompt }} module load Beast/2.5.2-GCC-8.2.0-2.31.1
{{ site.host_prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modules:
  1) StdEnv                        (S)   9) libffi/3.2.1-GCCcore-8.2.0
  2) GCCcore/8.2.0                      10) Python/3.7.2-GCCcore-8.2.0
  3) bzip2/1.0.6-GCCcore-8.2.0     (H)  11) binutils/2.31.1-GCCcore-8.2.0
  4) zlib/1.2.11-GCCcore-8.2.0     (H)  12) GCC/8.2.0-2.31.1
  5) ncurses/6.1-GCCcore-8.2.0     (H)  13) Java/11.0.2
  6) libreadline/8.0-GCCcore-8.2.0 (H)  14) beagle-lib/3.1.2-GCC-8.2.0-2.31.1
  7) XZ/5.2.4-GCCcore-8.2.0        (H)  15) Beast/2.5.2-GCC-8.2.0-2.31.1
  8) GMP/6.1.2-GCCcore-8.2.0       (H)

  Where:
   S:  Module is Sticky, requires --force to unload or purge
   H:             Hidden Module

```
{: .output}

So in this case, loading the `beast` module (a bioinformatics software
package), also loaded `Java/11.0.2` and `beagle-lib/3.1.2-GCC-8.2.0-2.31.1` as
well. Let's try unloading the `beast` package.

```
{{ site.host_prompt }} module unload Beast/2.5.2-GCC-8.2.0-2.31.1
{{ site.host_prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modules:
  1) StdEnv                        (S)   8) GMP/6.1.2-GCCcore-8.2.0       (H)
  2) GCCcore/8.2.0                       9) libffi/3.2.1-GCCcore-8.2.0    (H)
  3) bzip2/1.0.6-GCCcore-8.2.0     (H)  10) Python/3.7.2-GCCcore-8.2.0
  4) zlib/1.2.11-GCCcore-8.2.0     (H)  11) binutils/2.31.1-GCCcore-8.2.0 (H)
  5) ncurses/6.1-GCCcore-8.2.0     (H)  12) GCC/8.2.0-2.31.1
  6) libreadline/8.0-GCCcore-8.2.0 (H)  13) Java/11.0.2
  7) XZ/5.2.4-GCCcore-8.2.0        (H)  14) beagle-lib/3.1.2-GCC-8.2.0-2.31.1

  Where:
   S:  Module is Sticky, requires --force to unload or purge
   H:             Hidden Module

```
{: .output}

So using `module unload` "un-loads" a module along with its dependencies. If we
wanted to unload everything at once, we could run `module purge` (unloads
everything).

```
{{ site.host_prompt }} module purge
```
{: .language-bash}
```
The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) StdEnv
```
{: .output}

Note that `module purge` is informative. It lets us know that all but a default
set of packages have been unloaded (and how to actually unload these if we
truly so desired).
